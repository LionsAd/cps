<?php

/**
 * @file
 * Installation specific hooks for CPS module.
 */

/**
 * Implements hook_schema().
 */
function cps_schema() {
  $schema['cps_entity'] = array(
    'description' => 'Stores the relationships between entity revisions and their containing changesets.',
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'revision_id' => array(
        'description' => 'The id of the entity revision which the changeset points to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changeset_id' => array(
        'description' => 'The changeset id.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'published' => array(
        'description' => 'True if this entity was added to the changeset when it was published.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('entity_type', 'entity_id', 'changeset_id'),
    'indexes' => array(
      'changeset_id' => array('changeset_id'),
      'published_changeset_id' => array('published', 'changeset_id'),
    ),
  );

  $schema['cps_changeset'] = array(
    'description' => 'Stores metadata about available changesets.',
    'fields' => array(
      'changeset_id' => array(
        'description' => 'A machine name identifying the changeset.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The owner of the changeset.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'A name for the changeset.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this changeset.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'status' => array(
        'description' => 'The current status of the changeset.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'unpublished',
      ),
      'published' => array(
        'description' => 'Timestamp indicating when the changeset was published.',
        'type' => 'int',
      ),
      'variables' => array(
        'description' => 'A serialized array of variables staged in this changeset.',
        'type' => 'blob',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the entity was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('changeset_id'),
  );

  $schema['cps_changeset_history'] = array(
    'description' => 'Stores the history of changeset status changes.',
    'fields' => array(
      'changeset_id' => array(
        'description' => 'A machine name identifying the changeset.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The user who made the change.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'previous_status' => array(
        'description' => 'The previous status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'new_status' => array(
        'description' => 'The new status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'message' => array(
        'description' => 'An optional message accompanying the change',
        'type' => 'text',
        'size' => 'big',
      ),
      'timestamp' => array(
        'description' => 'Timestamp indicating when the status was changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'changeset_id' => array('changeset_id')
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function cps_install() {
  // Create the special live/published changeset.
  db_insert('cps_changeset')
    ->fields(array(
      'changeset_id' => CPS_PUBLISHED_CHANGESET,
      'name' => 'Live',
      'description' => 'The live changeset. This changeset cannot be edited or deleted.',
      'published' => 0,
      'uid' => 0,
      'status' => CPS_LIVE_STATUS,
    ))
    ->execute();

  cps_create_installed_changeset();
}

/**
 * Create the special changeset used to mark content when CPS is installed.
 */
function cps_create_installed_changeset() {
  // Make sure this is safe to run so that update hooks can call this to make
  // sure the changeset exists and not worry about dependencies. So we insert
  // this directly rather than using the entity system.
  $result = db_query('SELECT changeset_id FROM {cps_changeset} WHERE changeset_id = :changeset_id', array(':changeset_id' => CPS_INSTALLED_CHANGESET))->fetchField();
  if (!$result) {
    db_insert('cps_changeset')
      ->fields(array(
        'changeset_id' => CPS_INSTALLED_CHANGESET,
        'name' => 'Live content at install',
        'description' => 'The installed changeset. This is only used to mark the state of live content at the time of install.',
        'published' => REQUEST_TIME,
        'uid' => 0,
        'status' => 'archived',
      ))
      ->execute();
  }
}

/**
 * Mark content as part of the installed changeset.
 *
 * This method is used when an entity is newly added to CPS support to
 * mark all content that is not currently in CPS as having gone live
 * for the installed changeset. It is used to keep the state stable when
 * CPS is introduced to an already existing system.
 *
 * @param string $entity_type
 *   The entity type.
 *
 * @param mixed $sandbox
 *   If provided, this function won't loop, and you're expected to
 *   use a sandbox in a batch or update hook in order to use this in
 *   a long run. However install hooks don't do sandboxes, so in that
 *   case it should just loop.
 *
 * @return bool
 *   FALSE if finished, TRUE if there might be more records.
 */
function cps_mark_current_content($entity_type, &$sandbox = NULL) {
  cps_create_installed_changeset();

  $entity_info = entity_get_info($entity_type);
  $table = $entity_info['base table'];
  $id_key = $entity_info['entity keys']['id'];
  $revision_key = $entity_info['entity keys']['revision'];

  $limit = 500;

  if (isset($sandbox)) {
    if (!isset($sandbox['current'])) {
      $sandbox['current'] = 0;
    }

    $current = &$sandbox['current'];
  }
  else {
    $current = 0;
  }

  // The do {} while () loop ensures this runs once if using sandbox, or until
  // completion if not using sandbox.
  do {
    $query = db_select($table, 'base');
    $query->addJoin('LEFT', 'cps_entity', 'ce', "ce.entity_type = :entity_type AND ce.entity_id = base.$id_key", array(':entity_type' => $entity_type));
    // Only have results if there is no link to a changeset already.
    $result = $query->fields('base', array($id_key, $revision_key))
      ->isNull('ce.changeset_id')
      ->range($current, $limit)
      ->execute();

    if ($result->rowCount() == 0) {
      return FALSE;
    }

    $current += $limit;

    // Use a multi-insert here for performance.
    $insert_query = db_insert('cps_entity')
      ->fields(array('entity_type', 'entity_id', 'revision_id', 'changeset_id', 'published'));

    foreach ($result as $record) {
      $insert_query->values(array(
        'entity_type' => $entity_type,
        'entity_id' => $record->{$id_key},
        'revision_id' => $record->{$revision_key},
        'changeset_id' => CPS_INSTALLED_CHANGESET,
        'published' => 1, // Not part of the changeset but was live when changeset was published.
      ));
    }

    $insert_query->execute();
  } while (!isset($sandbox));

  return TRUE;
}

/**
 * Add status, uid fields to changesets. Add changeset history table.
 */
function cps_update_7001() {
  $tables['cps_changeset_history'] = array(
    'description' => 'Stores the history of changeset status changes.',
    'fields' => array(
      'changeset_id' => array(
        'description' => 'A machine name identifying the changeset.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The user who made the change.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'previous_status' => array(
        'description' => 'The previous status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'new_status' => array(
        'description' => 'The new status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'message' => array(
        'description' => 'An optional message accompanying the change',
        'type' => 'text',
        'size' => 'big',
      ),
      'timestamp' => array(
        'description' => 'Timestamp indicating when the status was changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'changeset_id' => array('changeset_id')
    ),
  );

  foreach ($tables as $name => $schema) {
    db_create_table($name, $schema);
  }

  $fields = array(
    'cps_changeset' => array(
      'uid' => array(
        'description' => 'The owner of the changeset.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The current status of the changeset.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the entity was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'cps_entity' => array(
      'published' => array(
        'description' => 'True if this entity was added to the changeset when it was published.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
  );

  foreach ($fields as $table => $table_fields) {
    foreach ($table_fields as $name => $field) {
      db_add_field($table, $name, $field);
    }
  }

  // Update all pre-existing published changesets to the published state.
  db_update('cps_changeset')
    ->fields(array(
      'status' => CPS_ARCHIVED_STATUS,
    ))
    ->condition('published', 0, '>')
    ->execute();

  $result = db_query("SELECT changeset_id FROM {cps_changeset} WHERE changeset_id = 'published'")->fetchCol();
  if (!$result) {
    // Create our special live changeset.
    db_insert('cps_changeset')
      ->fields(array(
        'changeset_id' => CPS_PUBLISHED_CHANGESET,
        'name' => 'Live',
        'description' => 'The live changeset. This changeset cannot be edited or deleted.',
        'published' => 0,
        'uid' => 1,
        'status' => CPS_LIVE_STATUS,
      ))
      ->execute();
  }
  else {
    $live = CPS_LIVE_STATUS;
    db_query("UPDATE {cps_changeset} SET status = '$live', uid = 1 WHERE changeset_id = 'published'");
  }

  db_update('cps_changeset')
    ->fields(array(
      'status' => 'unpublished'
    ))
    ->condition('status', '')
    ->execute();

}

/**
 * Add index on {cps_entity}.changeset_id.
 */
function cps_update_7100() {
  if (!db_index_exists('cps_entity', 'changeset_id')) {
    db_add_index('cps_entity', 'changeset_id', array('changeset_id'));
  }
}

/**
 * Add indexes, remove field_collection_item records.
 */
function cps_update_7101() {
   if (!db_index_exists('cps_entity', 'published_changeset_id')) {
    db_add_index('cps_entity', 'published_changeset_id', array('published', 'changeset_id'));
  }
  db_delete('cps_entity')
    ->condition('entity_type', 'field_collection_item')
    ->execute();
}

/**
 * Enable drafty module.
 */
function cps_update_7102() {
  if (!module_enable(array('drafty_enforce'))) {
    throw new Exception('Drafty module must be available to update to this version of CPS.');
  }
}

/**
 * Enable entity_status module.
 */
function cps_update_7103() {
  if (!module_enable(array('entity_status'))) {
    throw new Exception('Entity status module must be available to update to this version of CPS.');
  }
}

/**
 * Change {cps_entity}.published to default to 0.
 */
function cps_update_7104() {
  db_update('cps_entity')
    ->condition('published', 1, '<>')
    ->fields(array('published' => 0))
    ->execute();
  db_drop_index('cps_entity', 'published_changeset_id');

  $field = array(
    'description' => 'True if this entity was added to the changeset when it was published.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  $indexes = array(
    'indexes' => array(
      'published_changeset_id', array('published', 'changeset_id'),
    ),
  );
  db_change_field('cps_entity', 'published', 'published', $field, $indexes);
}

/**
 * Create the 'installed' changeset.
 */
function cps_update_7105() {
  cps_create_installed_changeset();
}
